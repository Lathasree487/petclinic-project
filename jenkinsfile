pipeline {
    agent any
    tools {
        maven 'Maven' 
    }
    environment {
        SONARQUBE_SERVER = 'sonar-server' 
        DOCKERHUB_REPO = 'chillakurulathasree/petclinic'
        COMMIT_ID = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    }
    stages {
        stage('Unit Test') {
            steps {
                script {
                    echo "Running Maven Unit Tests"
                    sh 'mvn clean test'
                }
            }
        }

        stage('SAST with SonarQube') {
            steps {
                script {
                    echo "Running SonarQube SAST Scan"
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                script {
                    timeout(time: 60, unit: 'MINUTES') {
                        dependencyCheck additionalArguments: '--scan ./ --disableNodeJS', odcInstallation: 'owasp'
                        dependencyCheckPublisher(
                            failedTotalCritical: 1,
                            failedTotalHigh: 5,
                            pattern: 'dependency-check-report.xml',
                            stopBuild: true,
                            unstableTotalCritical: 2,
                            unstableTotalHigh: 10
                        )
                    }
                }
            }
        }

        stage('Build WAR Package') {
            steps {
                script {
                    echo "Building WAR Package"
                    sh 'mvn clean package'
                }
            }
        }

        stage('Create Dockerfile') {
            steps {
                script {
                    echo "Creating Dockerfile for Tomcat deployment"
                    writeFile file: 'Dockerfile', text: '''
                    FROM tomcat:9.0-jdk11
                    COPY target/*.war /usr/local/tomcat/webapps/
                    EXPOSE 8080
                    CMD ["catalina.sh", "run"]
                    '''
                }
            }
        }

        stage('Lint Dockerfile') {
            steps {
                script {
                    echo "Linting Dockerfile with Hadolint"
                    sh '''
                    docker run --rm -i hadolint/hadolint < Dockerfile > hadolint_report.txt
                    '''
                    archiveArtifacts artifacts: 'hadolint_report.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image"
                    def imageTag = "${DOCKERHUB_REPO}:${env.BUILD_NUMBER}-${COMMIT_ID}"
                    sh "docker build -t ${imageTag} ."
                }
            }
        }

        stage('Trivy Image Scan') {
    steps {
        script {
            echo "Scanning Docker Image with Trivy"
            def imageTag = "${DOCKERHUB_REPO}:${env.BUILD_NUMBER}-${COMMIT_ID}"
            sh """
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --format pdf --output trivy_report.pdf ${imageTag}
            """
            archiveArtifacts artifacts: 'trivy_report.pdf', allowEmptyArchive: true
        }
    }
}


        stage('ZAP Baseline Scan') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    script {
                        def status = sh(script: '''#!/bin/bash
                        docker run -v $PWD:/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
                        -t https://www.example.com/ > zap_baselinereport.html
                        ''', returnStatus: true)

                        if (status == 0) {
                            echo "ZAP scan completed successfully."
                        } else {
                            error "ZAP scan failed with status code: ${status}"
                        }
                    }
                }
            }
        }
    }
}

        // Stage 9: Push Docker Image to DockerHub
    //     stage('Push Docker Image') {
    //         steps {
    //             script {
    //                 echo "Pushing Docker Image to DockerHub"
    //                 def imageTag = "${DOCKERHUB_REPO}:${env.BUILD_NUMBER}-${COMMIT_ID}"
    //                 docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
    //                     sh "docker push ${imageTag}"
    //                 }
    //             }
    //         }
    //     }
    

    // post {
    //     always {
    //         echo "Cleaning up Docker resources"
    //         sh 'docker system prune -f'
    //     }
    //     success {
    //         mail to: 'lathasree.chillakuru@gmail.com',
    //              subject: "Jenkins Job - SUCCESS",
    //              body: "The Jenkins job has completed successfully."
    //     }
    //     failure {
    //         mail to: 'lathasree.chillakuru@gmail.com',
    //              subject: "Jenkins Job - FAILURE",
    //              body: "The Jenkins job has failed. Please review the logs."
    //     }
    // }

