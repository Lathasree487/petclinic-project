pipeline {
    agent any
    tools {
        // Specify the JDK and Maven installations to use
        // jdk 'jdk17' // Make sure 'jdk17' is configured in Jenkins under Global Tool Configuration
        maven 'Maven' // Ensure 'maven' is configured in Jenkins under Global Tool Configuration
    }
    environment {
        // Environment variables for tool connections
        SONARQUBE_SERVER = 'sonar-server' // Configure in Jenkins
        DOCKERHUB_REPO = 'chillakurulathasree/petclinic'
        COMMIT_ID = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    }
    stages {
        // Stage 1: Unit Test with Maven
        stage('Unit Test') {
            steps {
                script {
                    echo "Running Maven Unit Tests"
                    sh 'mvn clean test'
                }
            }
        }

        // Stage 2: Static Application Security Testing (SAST) with SonarQube
        stage('SAST with SonarQube') {
            steps {
                script {
                    echo "Running SonarQube SAST Scan"
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }

        // Stage 3: Dependency Scanning with OWASP Dependency-Check
        stage('Dependency Scanning') {
            steps {
                script {
                    echo "Running OWASP Dependency Check"
                    sh '''
                    dependency-check --scan . --out dependency-check-report --format ALL
                    '''
                    archiveArtifacts artifacts: 'dependency-check-report/dependency-check-report.*', allowEmptyArchive: true
                }
            }
        }

        // Stage 4: Build WAR Package
        stage('Build WAR Package') {
            steps {
                script {
                    echo "Building WAR Package"
                    sh 'mvn clean package'
                }
            }
        }

        // Stage 5: Lint Dockerfile with Hadolint
        stage('Lint Dockerfile') {
            steps {
                script {
                    echo "Linting Dockerfile with Hadolint"
                    sh '''
                    docker run --rm -i hadolint/hadolint < Dockerfile > hadolint_report.txt
                    '''
                    archiveArtifacts artifacts: 'hadolint_report.txt', allowEmptyArchive: true
                }
            }
        }

        // Stage 6: Build Docker Image
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image"
                    def imageTag = "${DOCKERHUB_REPO}:${env.BUILD_NUMBER}-${COMMIT_ID}"
                    sh "docker build -t ${imageTag} ."
                }
            }
        }

        // Stage 7: Docker Image Vulnerability Scanning with Trivy
        stage('Trivy Image Scan') {
            steps {
                script {
                    echo "Scanning Docker Image with Trivy"
                    def imageTag = "${DOCKERHUB_REPO}:${env.BUILD_NUMBER}-${COMMIT_ID}"
                    sh '''
                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --format pdf --output trivy_report.pdf ${imageTag}
                    '''
                    archiveArtifacts artifacts: 'trivy_report.pdf', allowEmptyArchive: true
                }
            }
        }

        // Stage 8: OWASP ZAP Scan
        stage('OWASP ZAP Scan') {
            steps {
                script {
                    echo "Running OWASP ZAP Scan"
                    sh '''
                    docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py -t http://localhost -r zap_report.html -i
                    '''
                    archiveArtifacts artifacts: 'zap_report.html', allowEmptyArchive: true
                }
            }
        }

        // Stage 9: Push Docker Image to DockerHub
        stage('Push Docker Image') {
            steps {
                script {
                    echo "Pushing Docker Image to DockerHub"
                    def imageTag = "${DOCKERHUB_REPO}:${env.BUILD_NUMBER}-${COMMIT_ID}"
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                        sh "docker push ${imageTag}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up Docker resources"
            sh 'docker system prune -f'
        }
        success {
            mail to: 'lathasree.chillakuru@gmail.com',
                 subject: "Jenkins Job - SUCCESS",
                 body: "The Jenkins job has completed successfully."
        }
        failure {
            mail to: 'lathasree.chillakuru@gmail.com',
                 subject: "Jenkins Job - FAILURE",
                 body: "The Jenkins job has failed. Please review the logs."
        }
    }
}
